{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"URLObject","tagline":"URLs for humans.","google":"","body":"# URLObject 2\r\n\r\n`URLObject` is a utility class for manipulating URLs. The latest incarnation of\r\nthis library builds upon the ideas of its predecessor, but aims for a clearer\r\nAPI, focusing on proper method names over operator overrides. It's also being\r\ndeveloped from the ground up in a test-driven manner, with comprehensive\r\ndocumentation.\r\n\r\n## Tour\r\n\r\n```pycon\r\n>>> from urlobject import URLObject\r\n```\r\n\r\nCreate a URLObject with a string representing a URL. `URLObject` is a regular\r\nsubclass of `unicode`, it just has several properties and methods which make it\r\neasier to manipulate URLs. All the basic slots from urlsplit are there:\r\n\r\n```pycon\r\n>>> url = URLObject(\"https://github.com/zacharyvoase/urlobject?spam=eggs#foo\")\r\n>>> url\r\nURLObject(u'https://github.com/zacharyvoase/urlobject?spam=eggs#foo')\r\n>>> unicode(url)\r\nu'https://github.com/zacharyvoase/urlobject?spam=eggs#foo'\r\n>>> url.scheme\r\nu'https'\r\n>>> url.netloc\r\nNetloc(u'github.com')\r\n>>> url.hostname\r\nu'github.com'\r\n>>> (url.username, url.password)\r\n(None, None)\r\n>>> print url.port\r\nNone\r\n>>> url.default_port\r\n443\r\n>>> url.path\r\nURLPath(u'/zacharyvoase/urlobject')\r\n>>> url.query\r\nQueryString(u'spam=eggs')\r\n>>> url.fragment\r\nu'foo'\r\n```\r\n\r\nYou can replace any of these slots using a `with_*()` method. Remember\r\nthat, because `unicode` (and therefore `URLObject`) is immutable, these methods\r\nall return new URLs:\r\n\r\n```pycon\r\n>>> url.with_scheme('http')\r\nURLObject(u'http://github.com/zacharyvoase/urlobject?spam=eggs#foo')\r\n>>> url.with_netloc('example.com')\r\nURLObject(u'https://example.com/zacharyvoase/urlobject?spam=eggs#foo')\r\n>>> url.with_auth('alice', '1234')\r\nURLObject(u'https://alice:1234@github.com/zacharyvoase/urlobject?spam=eggs#foo')\r\n>>> url.with_path('/some_page')\r\nURLObject(u'https://github.com/some_page?spam=eggs#foo')\r\n>>> url.with_query('funtimes=yay')\r\nURLObject(u'https://github.com/zacharyvoase/urlobject?funtimes=yay#foo')\r\n>>> url.with_fragment('example')\r\nURLObject(u'https://github.com/zacharyvoase/urlobject?spam=eggs#example')\r\n```\r\n\r\nFor the query and fragment, `without_` methods also exist:\r\n\r\n```pycon\r\n>>> url.without_query()\r\nURLObject(u'https://github.com/zacharyvoase/urlobject#foo')\r\n>>> url.without_fragment()\r\nURLObject(u'https://github.com/zacharyvoase/urlobject?spam=eggs')\r\n```\r\n\r\n\r\n### Relative URL Resolution\r\n\r\nYou can resolve relative URLs against a URLObject using `relative()`:\r\n\r\n```pycon\r\n>>> url.relative('another-project')\r\nURLObject(u'https://github.com/zacharyvoase/another-project')\r\n>>> url.relative('?different-query-string')\r\nURLObject(u'https://github.com/zacharyvoase/urlobject?different-query-string')\r\n>>> url.relative('#frag')\r\nURLObject(u'https://github.com/zacharyvoase/urlobject?spam=eggs#frag')\r\n```\r\n\r\nAbsolute URLs will just be returned as-is:\r\n\r\n```pycon\r\n>>> url.relative('http://example.com/foo')\r\nURLObject(u'http://example.com/foo')\r\n```\r\n\r\nAnd you can specify as much or as little of the new URL as you like:\r\n\r\n```pycon\r\n>>> url.relative('//example.com/foo') # Preserve scheme\r\nURLObject(u'https://example.com/foo')\r\n>>> url.relative('/dvxhouse/intessa') # Just change path\r\nURLObject(u'https://github.com/dvxhouse/intessa')\r\n>>> url.relative('/dvxhouse/intessa?foo=bar') # Change path and query\r\nURLObject(u'https://github.com/dvxhouse/intessa?foo=bar')\r\n>>> url.relative('/dvxhouse/intessa?foo=bar#baz') # Change path, query and fragment\r\nURLObject(u'https://github.com/dvxhouse/intessa?foo=bar#baz')\r\n```\r\n\r\n\r\n### Path\r\n\r\nThe `path` property is an instance of `URLPath`, which has several methods and\r\nproperties for manipulating the path string:\r\n\r\n```pycon\r\n>>> url.path\r\nURLPath(u'/zacharyvoase/urlobject')\r\n>>> url.path.parent\r\nURLPath(u'/zacharyvoase/')\r\n>>> url.path.segments\r\n(u'zacharyvoase', u'urlobject')\r\n>>> url.path.add_segment('subnode')\r\nURLPath(u'/zacharyvoase/urlobject/subnode')\r\n>>> url.path.root\r\nURLPath(u'/')\r\n```\r\n\r\nSome of these are aliased on the URL itself:\r\n\r\n```pycon\r\n>>> url.parent\r\nURLObject(u'https://github.com/zacharyvoase/?spam=eggs#foo')\r\n>>> url.add_path_segment('subnode')\r\nURLObject(u'https://github.com/zacharyvoase/urlobject/subnode?spam=eggs#foo')\r\n>>> url.add_path('tree/urlobject2')\r\nURLObject(u'https://github.com/zacharyvoase/urlobject/tree/urlobject2?spam=eggs#foo')\r\n>>> url.root\r\nURLObject(u'https://github.com/?spam=eggs#foo')\r\n```\r\n\r\n\r\n### Query string\r\n\r\nThe `query` property is an instance of `QueryString`, so you can access\r\nsub-attributes of that with richer representations of the query string:\r\n\r\n```pycon\r\n>>> url.query\r\nQueryString(u'spam=eggs')\r\n>>> url.query.list\r\n[(u'spam', u'eggs')]\r\n>>> url.query.dict\r\n{u'spam': u'eggs'}\r\n>>> url.query.multi_dict\r\n{u'spam': [u'eggs']}\r\n```\r\n\r\nModifying the query string is easy, too. You can 'add' or 'set' parameters: any\r\nmethod beginning with `add_` will allow you to use the same parameter name\r\nmultiple times in the query string; methods beginning with `set_` will only\r\nallow one value for a given parameter name. Don't forget that each method will\r\nreturn a *new* `QueryString` instance:\r\n\r\n```pycon\r\n>>> url.query.add_param(u'spam', u'ham')\r\nQueryString(u'spam=eggs&spam=ham')\r\n>>> url.query.set_param(u'spam', u'ham')\r\nQueryString(u'spam=ham')\r\n>>> url.query.add_params({u'spam': u'ham', u'foo': u'bar'})\r\nQueryString(u'spam=eggs&foo=bar&spam=ham')\r\n>>> url.query.set_params({u'spam': u'ham', u'foo': u'bar'})\r\nQueryString(u'foo=bar&spam=ham')\r\n```\r\n\r\nDelete parameters with `del_param()` and `del_params()`. These will remove all\r\nappearances of the requested parameter name from the `QueryString`:\r\n\r\n```pycon\r\n>>> url.query.del_param(u'spam')\r\nQueryString(u'')\r\n>>> url.query.add_params({u'foo': u'bar'}).del_params(['spam', 'foo'])\r\nQueryString(u'')\r\n```\r\n\r\nAgain, some of these methods are aliased on the `URLObject` directly:\r\n\r\n```pycon\r\n>>> url.add_query_param(u'spam', u'ham')\r\nURLObject(u'https://github.com/zacharyvoase/urlobject?spam=eggs&spam=ham#foo')\r\n>>> url.set_query_param(u'spam', u'ham')\r\nURLObject(u'https://github.com/zacharyvoase/urlobject?spam=ham#foo')\r\n>>> url.del_query_param(u'spam')\r\nURLObject(u'https://github.com/zacharyvoase/urlobject#foo')\r\n```\r\n\r\n\r\n## (Un)license\r\n\r\nThis is free and unencumbered software released into the public domain.\r\n\r\nAnyone is free to copy, modify, publish, use, compile, sell, or distribute this\r\nsoftware, either in source code form or as a compiled binary, for any purpose,\r\ncommercial or non-commercial, and by any means.\r\n\r\nIn jurisdictions that recognize copyright laws, the author or authors of this\r\nsoftware dedicate any and all copyright interest in the software to the public\r\ndomain. We make this dedication for the benefit of the public at large and to\r\nthe detriment of our heirs and successors. We intend this dedication to be an\r\novert act of relinquishment in perpetuity of all present and future rights to\r\nthis software under copyright law.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\r\nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nFor more information, please refer to <http://unlicense.org/>"}